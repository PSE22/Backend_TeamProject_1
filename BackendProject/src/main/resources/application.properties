# Server Port : Default(8080) -> 8000(change)
server.port=8000
# Java source modify server auto restart
spring.devtools.restart.enabled=true

# DB Library setting : build.gradle Oracle db library empty Error
#spring.datasource.driver-class-name=net.sf.log4jdbc.sql.jdbcapi.DriverSpy
#spring.datasource.url=jdbc:log4jdbc:oracle:thin:@localhost:1521/xepdb1
#spring.datasource.username=scott
#spring.datasource.password=!Ds1234567890

# Oracle setting (Oracle cloud wallet setting) log4j
spring.datasource.driver-class-name=net.sf.log4jdbc.sql.jdbcapi.DriverSpy

# jdbc:log4jdbc:oracle:thin:@orcl_low?TNS_ADMIN=WalletPath
# (1) Mac
spring.datasource.url=jdbc:log4jdbc:oracle:thin:@orcl_low?TNS_ADMIN=/Users/99_Wallet/Wallet_orcl/
# (2) Windows
#spring.datasource.url=jdbc:log4jdbc:oracle:thin:@orcl_low?TNS_ADMIN=C:/99_Wallet/Wallet_orcl/

spring.datasource.username=seoulmouse
spring.datasource.password=!Ds1234567890
#  Docker image publish wallet path
#spring.datasource.url=jdbc:log4jdbc:oracle:thin:@orcl_low?TNS_ADMIN=/Users/eWallet/Wallet_orcl/
# Cloud DB connect count limit
spring.datasource.hikari.minimumIdle=1
spring.datasource.hikari.maximumPoolSize=1
spring.datasource.hikari.poolName=HikariPoolBooks

# JPA connect setting
spring.jpa.hibernate.ddl-auto=none
# DB product connection ( oracle 12up : Oracle12cDialect )
spring.jpa.database-platform=org.hibernate.dialect.Oracle12cDialect
# batch size setting : Relationship setting N+1 problem minimize (annotation join use)
spring.jpa.properties.hibernate.default_batch_fetch_size=1000

# Upload file size limit setting : default until 1MB
spring.servlet.multipart.max-file-size=10MB
spring.servlet.multipart.max-request-size=10MB

# TODO: Kafka setting
# Setting if consumer bootstrap servers exist separately
spring.kafka.bootstrap-servers=localhost:9092
# Kafka docker communication setting change
#spring.kafka.bootstrap-servers=kafka:9092

#  Can identify Consumer Group Id setting
spring.kafka.consumer.group-id=academy

# offset : Consumer read message mark
# setting : earliest / latest
#       => first setting(no offset), suddenly error etc empty situation how to do setting
spring.kafka.consumer.auto-offset-reset=earliest
# when data receive, key/value deserialization : json -> (key, value) change setting
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer

# Setting if producer bootstrap servers exist separately : (key, value) -> json change setting
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer